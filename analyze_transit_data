import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

def analyze_transit_data(data_file):
    # Load transit light curve data
    data = pd.read_csv(data_file)
    
    # Extract time and brightness values
    time = data['Time']
    brightness = data['Brightness']
    
    # Normalize brightness values
    brightness = (brightness - np.mean(brightness)) / np.std(brightness)
    
    # Apply a rolling mean to smoothen the light curve
    smoothed_brightness = pd.Series(brightness).rolling(window=10, center=True).mean()
    
    # Find the period of the transit using Lomb-Scargle periodogram
    from astropy.timeseries import LombScargle
    frequency, power = LombScargle(time, brightness).autopower()
    period = 1 / frequency[np.argmax(power)]
    
    # Detect transit events using a threshold-based approach
    transit_threshold = 3.0  # Adjust this threshold based on the data
    transit_indices = np.where(smoothed_brightness < -transit_threshold)[0]
    
    # Calculate transit duration and depth
    transit_duration = np.median(np.diff(time[transit_indices]))
    transit_depth = np.median(smoothed_brightness[transit_indices])
    
    # Identify potential habitable planet candidates based on transit duration and depth
    habitable_candidates = np.where((transit_duration > 0.5) & (transit_depth > -0.1))[0]
    
    # Generate a report summarizing the analyzed data
    report = f"""
    # Exoplanet Transit Analysis Report
    
    ## Data Information
    - Data File: {data_file}
    - Number of Data Points: {len(data)}
    
    ## Period Detection
    - Detected Period: {period:.2f} days
    
    ## Transit Events
    - Number of Transit Events: {len(transit_indices)}
    - Median Transit Duration: {transit_duration:.2f} days
    - Median Transit Depth: {transit_depth:.2f}
    
    ## Potential Habitable Planet Candidates
    - Number of Candidates: {len(habitable_candidates)}
    - Candidate Indices: {habitable_candidates}
    """
    
    # Plot the light curve with detected transit events
    plt.figure(figsize=(10, 6))
    plt.plot(time, smoothed_brightness, color='b', label='Smoothed Light Curve')
    plt.scatter(time[transit_indices], smoothed_brightness[transit_indices], color='r', label='Transit Events')
    plt.xlabel('Time')
    plt.ylabel('Normalized Brightness')
    plt.title('Exoplanet Transit Analysis')
    plt.legend()
    plt.show()
    
    return report

# Example usage
data_file = 'transit_data.csv'
report = analyze_transit_data(data_file)
print(report)
